import typer
import gzip
import shutil
import subprocess
import tempfile
from pathlib import Path
from tqdm import tqdm
from typing import Optional
from genomicUtils.utils import version_callback
from genomicUtils import __version__

app = typer.Typer(help="Convert 10X CellRanger ARC/ATAC fragment file to BigWig format")

description = """
    Convert 10X CellRanger ARC/ATAC fragment file to BigWig format. The input can be a BED file (generated by Signac's SplitFragments function) or a fragment.tsv file (from CellRanger ARC/ATAC). The output is a BigWig file suitable for visualization in genome browsers.
    """

def check_dependencies():
    for tool in ["bedtools", "samtools", "bamCoverage"]:
        if shutil.which(tool) is None:
            raise RuntimeError(f"Error: {tool} not found in PATH. Please install it.")
        
def check_normalization(normalize, effective_genome_size):
    valid_normalizations = ["CPM", "RPKM", "BPM", "RPGC", "None"]
    if normalize not in valid_normalizations:
        raise ValueError(f"Invalid normalization method: {normalize}. Choose from {valid_normalizations}.")
    
    if normalize.lower() != "none" and effective_genome_size is None:
        raise ValueError("Effective genome size must be provided when normalization is not 'None'. Consult deepTools documentation (https://deeptools.readthedocs.io/en/latest/content/tools/bamCoverage.html) for more details on normalization methods.")


def read_barcodes(barcode_file):
    with open(barcode_file) as f:
        return set(line.strip() for line in f if line.strip())


def is_gzipped(filepath):
    return str(filepath).endswith(".gz")


def stream_fragments_to_bam(input_file, output_bam, genome_file, barcodes_file=None):
    """
    Filter fragments and stream directly into bedtobam, avoiding intermediate BED files.
    """
    barcodes_set = read_barcodes(barcodes_file) if barcodes_file else None
    open_func = gzip.open if is_gzipped(input_file) else open

    typer.echo("Filtering fragments and streaming to bedtobam...")
    bedtobam_proc = subprocess.Popen(
        ["bedtools", "bedtobam", "-i", "stdin", "-g", str(genome_file)],
        stdin=subprocess.PIPE,
        stdout=open(output_bam, "wb")
    )

    with open_func(input_file, "rt") as infile:
        for line in tqdm(infile, desc="Processing fragments"):
            parts = line.strip().split("\t")
            if len(parts) < 3:
                continue
            if barcodes_set and parts[-2] not in barcodes_set:  # column -2 = cell barcode
                continue
            barcode = parts[3] if len(parts) >= 4 else "."
            bed_line = f"{parts[0]}\t{parts[1]}\t{parts[2]}\t{barcode}\n"

            bedtobam_proc.stdin.write(bed_line.encode())

    bedtobam_proc.stdin.close()
    bedtobam_proc.wait()
    if bedtobam_proc.returncode != 0:
        raise RuntimeError("bedtobam failed during streaming input.")

def run_command(command, description, stdout=None):
    typer.echo(f"[Running] {description}: {' '.join(command)}")
    process = subprocess.Popen(
        command,
        stdout=subprocess.PIPE,
        stderr=subprocess.STDOUT,
        text=True  # Decodes bytes to str automatically (Python 3.6+)
    )

    for line in process.stdout:
        print(line, end="")  # Already includes newline

    process.wait()
    if process.returncode != 0:
        raise RuntimeError(f"{description} failed.")


@app.command(no_args_is_help=True, epilog=description)
def main(
    version: Optional[bool] = typer.Option(
        None, "--version", "-v", callback=version_callback, is_eager=True,
        help="Show version and exit"
    ),
    input: Path = typer.Option(..., "-i", "--input", help="Input BED or fragment.tsv(.gz) file."),
    genome: Path = typer.Option(..., "-g", "--genome", help="Genome chromosome sizes file."),
    output: Path = typer.Option(..., "-o", "--output", help="Output BigWig file."),
    binsize: int = typer.Option(50, "--binsize", "-bs", help="Bin size. Larger values will result in lower resolution, but smaller values will increase file size and processing time."),
    normalize: str = typer.Option("RPGC", "--normalizeUsing", "-n", 
                                  help="Normalization method for genome coverage. Options: CPM, RPKM, BPM, RPGC, None.",
                                  case_sensitive=False,
                                  show_choices=True),
    effective_genome_size: Optional[int] = typer.Option(None, "--effectiveGenomeSize", "-gs", 
                                                        help="Effective genome size for normalization. Required if normalizeUsing is NOT None."),
    blacklist_file: Optional[Path] = typer.Option(None, "--blackListFileName", "-bl",
                                                  help="Optional BED or GTF file containing regions that should be excluded from all analyses. Check deepTools documentation (https://deeptools.readthedocs.io/en/latest/content/tools/bamCoverage.html) for details."),
    threads: int = typer.Option(8, "--threads", "-t", help="Number of threads"),
    barcodes: Path = typer.Option(None, "--barcodes", "-c", help="Optional barcode file"),
    keep_temp: bool = typer.Option(False, "--keep-temp", "-k", help="Keep intermediate files")
):
    
    check_dependencies()
    check_normalization(normalize, effective_genome_size)

    if keep_temp:
        tmpdir = Path("bed2bigwig_temp")
        tmpdir.mkdir(exist_ok=True)
    else:
        tmpdir = Path(tempfile.mkdtemp())
    typer.echo(f"Using temporary directory: {tmpdir}")
    
    bam_file = tmpdir / "fragments.bam"
    sorted_bam = tmpdir / "fragments.sorted.bam"

    typer.echo(f"Running analysis using {threads} threads when possible...")

    stream_fragments_to_bam(input, bam_file, genome, barcodes)

    typer.echo("Sorting BAM...")
    run_command(["samtools", "sort", "-@", str(threads), "-o", str(sorted_bam), str(bam_file)], "Sort BAM")

    typer.echo("Indexing BAM...")
    run_command(["samtools", "index", str(sorted_bam)], "Index BAM")

    typer.echo("Running bamCoverage...")
    cmd = [
        "bamCoverage",
        "-b", str(sorted_bam),
        "-o", str(output),
        "--binSize", str(binsize),
        "--numberOfProcessors", str(threads),
    ]
    if normalize.lower() != "none":
        cmd += ["--normalizeUsing", normalize.upper(),
                "--effectiveGenomeSize", str(effective_genome_size)]
    if blacklist_file:
        cmd += ["--blackListFileName", str(blacklist_file)]
    run_command(cmd, "bamCoverage")

    typer.echo(f"\nBigWig file written to: {output}")
    if keep_temp:
        typer.echo(f"Temporary files kept at: {tmpdir}")
    else:
        typer.echo(f"Temporary files cleaned up: {tmpdir}")
        shutil.rmtree(tmpdir, ignore_errors=True)

if __name__ == "__main__":
    app()