# Given a transcript annotation file (generated by utils/extract_transcript_from_gtf.py)
# find the promoter regions of each transcript with user defined regions upstream and downstream of the TSS
# Output a bed file with the promoter regions, with gene id and gene symbol as the name field

# Usage: python generate_promoter_bed.py -t <transcript_file> -o <output_file> -c <chrom_sizes> -u <upstream> -d <downstream> -p

import pandas as pd
import numpy as np
import typer
from pathlib import Path
from typing import Optional
from genomicUtils.utils import version_callback
from genomicUtils import __version__

app = typer.Typer(help="Generate promoter regions from a transcript annotation file.")

description = """
    Generate promoter regions from a transcript annotation file. To run this script, you need to have a transcript annotation file generated by running `extractTranscriptFromGtf.py` on a GTF file. The output will be a BED file containing the promoter regions of each transcript, with gene ID and gene symbol as the name field.
    """

@app.command(no_args_is_help=True, epilog=description)
def generate_promoter_bed(
    version: Optional[bool] = typer.Option(
        None, "--version", "-v", callback=version_callback, is_eager=True,
        help="Show version and exit"
    ),
    transcript_file: Path = typer.Option(..., "-t", "--transcript_file", help="Transcript annotation file, generated by running extractTranscriptFromGtf.py on a gtf file"),
    output_file: Path = typer.Option(..., "-o", "--output_file", help="Output bed file"),
    chrom_sizes: Path = typer.Option(..., "-c", "--chrom_sizes", help="Chromosome sizes file"),
    upstream: int = typer.Option(3000, "-u", "--upstream", help="Number of bases upstream of the TSS. Default 3000"),
    downstream: int = typer.Option(1000, "-d", "--downstream", help="Number of bases downstream of the TSS. Default 1000"),
    protein_coding_only: bool = typer.Option(False, "-p", "--protein-coding-only", help="Keep only protein coding genes")
):
    
    # Print the parameters
    print("\n")
    print("Generating promoter regions with the following parameters:")
    print("Transcript annotation file: " + transcript_file)
    print("Output file: " + output_file)
    print("Upstream: " + str(upstream) + "bp")
    print("Downstream: " + str(downstream) + "bp")

    # Read in the transcript annotation file
    transcripts = pd.read_csv(transcript_file, sep="\t", header=0,
                              dtype={"chromosome": str,
                                     "start": int,
                                     "end": int,
                                     "strand": str,
                                     "transcript_id": str,
                                     "transcript_name": str,
                                     "transcript_type": str,
                                     "gene_id": str,
                                     "gene_name": str})

    # Keep only protein coding genes, if needed
    if protein_coding_only:
        transcripts = transcripts[transcripts["transcript_type"] == "protein_coding"]

    # Extract the transcript_id, gene_name, chromosome, strand, start and end positions
    transcripts = transcripts[["transcript_id", "gene_name", "chromosome", "strand", "start", "end"]]

    # Generate the promoter regions
    conditions = [transcripts["strand"] == "+", transcripts["strand"] == "-"]
    choices_start = [transcripts["start"] - upstream, transcripts["end"] - downstream]
    choices_end = [transcripts["start"] + downstream, transcripts["end"] + upstream]

    transcripts["promoter_start"] = np.select(conditions, choices_start)
    transcripts["promoter_end"] = np.select(conditions, choices_end)

    # If any of the start or end positions are negative, set them to 0
    transcripts["promoter_start"] = transcripts["promoter_start"].clip(lower=0)
    transcripts["promoter_end"] = transcripts["promoter_end"].clip(lower=0)

    # Read in the chromosome sizes file
    chrom_sizes = pd.read_csv(chrom_sizes, sep="\t", header=None, names=["chromosome", "size"])
    # If any of the promoter regions are beyond the chromosome size, set them to the chromosome size
    transcripts = pd.merge(transcripts, chrom_sizes, on="chromosome", how="left")
    transcripts["promoter_end"] = transcripts[["promoter_end", "size"]].min(axis=1)

    # Generate the bed file
    bed = transcripts[["chromosome", "promoter_start", "promoter_end", "gene_name", "transcript_id", "strand"]]

    # Write the bed file
    bed.to_csv(output_file, sep="\t", header=False, index=False)
    typer.echo(f"Promoter regions written to: {output_file}")

if __name__ == "__main__":
    app()